                                                   Hash Map in Python | GeeksforGeeks                                      Skip to content          CoursesDSA to DevelopmentGet IBM CertificationNewly Launched!Master Django FrameworkBecome AWS CertifiedFor Working ProfessionalsInterview 101: DSA & System DesignData Science Training ProgramJAVA Backend Development (Live)DevOps Engineering (LIVE)Data Structures & Algorithms in PythonFor StudentsPlacement Preparation CourseData Science (Live)Data Structure & Algorithm-Self Paced (C++/JAVA)Master Competitive Programming (Live)Full Stack Development with React & Node JS (Live)Full Stack DevelopmentData Science ProgramAll CoursesTutorialsData Structures & AlgorithmsML & Data ScienceInterview CornerProgramming LanguagesWeb DevelopmentCS SubjectsDevOps And LinuxSchool LearningPracticeBuild your AI AgentGfG 160Problem of the DayPractice Coding ProblemsGfG SDE SheetContestsAccenture Hackathon (Ending Soon!)GfG Weekly [Rated Contest]Job-A-Thon Hiring ChallengeAll Contests and Events                                                  Python TutorialInterview QuestionsPython QuizPython GlossaryPython ProjectsPractice PythonData Science With PythonPython Web DevDSA with PythonPython OOPs        Sign In   ▲             Open In App            Next Article: hashlib module in Python                          Hash Map in Python    Last Updated :  25 Jul, 2024                Comments        Improve                            Suggest changes       Like Article    Like           Report          Hash maps are indexed data structures. A hash map makes use of a hash function to compute an index with a key into an array of buckets or slots. Its value is mapped to the bucket with the corresponding index. The key is unique and immutable. Think of a hash map as a cabinet having drawers with labels for the things stored in them. For example, storing user information- consider email as the key, and we can map values corresponding to that user such as the first name, last name etc to a bucket.   Hash function is the core of implementing a hash map. It takes in the key and translates it to the index of a bucket in the bucket list. Ideal hashing should produce a different index for each key. However, collisions can occur. When hashing gives an existing index, we can simply use a bucket for multiple values by appending a list or by rehashing. In Python, dictionaries are examples of hash maps. We’ll see the implementation of hash map from scratch in order to learn how to build and customize such data structures for optimizing search. The hash map design will include the following functions: set_val(key, value): Inserts a key-value pair into the hash map. If the value already exists in the hash map, update the value.get_val(key): Returns the value to which the specified key is mapped, or “No record found” if this map contains no mapping for the key.delete_val(key): Removes the mapping for the specific key if the hash map contains the mapping for the key.Below is the implementation.  Python  class HashTable:      # Create empty bucket list of given size     def __init__(self, size):         self.size = size         self.hash_table = self.create_buckets()      def create_buckets(self):         return [[] for _ in range(self.size)]      # Insert values into hash map     def set_val(self, key, val):                # Get the index from the key         # using hash function         hashed_key = hash(key) % self.size                  # Get the bucket corresponding to index         bucket = self.hash_table[hashed_key]          found_key = False         for index, record in enumerate(bucket):             record_key, record_val = record                          # check if the bucket has same key as             # the key to be inserted             if record_key == key:                 found_key = True                 break          # If the bucket has same key as the key to be inserted,         # Update the key value         # Otherwise append the new key-value pair to the bucket         if found_key:             bucket[index] = (key, val)         else:             bucket.append((key, val))      # Return searched value with specific key     def get_val(self, key):                # Get the index from the key using         # hash function         hashed_key = hash(key) % self.size                  # Get the bucket corresponding to index         bucket = self.hash_table[hashed_key]          found_key = False         for index, record in enumerate(bucket):             record_key, record_val = record                          # check if the bucket has same key as              # the key being searched             if record_key == key:                 found_key = True                 break          # If the bucket has same key as the key being searched,         # Return the value found         # Otherwise indicate there was no record found         if found_key:             return record_val         else:             return "No record found"      # Remove a value with specific key     def delete_val(self, key):                # Get the index from the key using         # hash function         hashed_key = hash(key) % self.size                  # Get the bucket corresponding to index         bucket = self.hash_table[hashed_key]          found_key = False         for index, record in enumerate(bucket):             record_key, record_val = record                          # check if the bucket has same key as             # the key to be deleted             if record_key == key:                 found_key = True                 break         if found_key:             bucket.pop(index)         return      # To print the items of hash map     def __str__(self):         return "".join(str(item) for item in self.hash_table)   hash_table = HashTable(50)  # insert some values hash_table.set_val('gfg@example.com', 'some value') print(hash_table) print()  hash_table.set_val('portal@example.com', 'some other value') print(hash_table) print()  # search/access a record with key print(hash_table.get_val('portal@example.com')) print()  # delete or remove a value hash_table.delete_val('portal@example.com') print(hash_table)  Output:  Time Complexity: Memory index access takes constant time and hashing takes constant time. Hence, the search complexity of a hash map is also constant time, that is, O(1). Advantages of HashMaps ● Fast random memory access through hash functions  ● Can use negative and non-integral values to access the values.  ● Keys can be stored in sorted order hence can iterate over the maps easily. Disadvantages of HashMaps  ● Collisions can cause large penalties and can blow up the time complexity to linear.  ● When the number of keys is large, a single hash function often causes collisions.  Applications of HashMaps  ● These have applications in implementations of Cache where memory locations are mapped to small sets.  ● They are used to index tuples in Database management systems.  ● They are also used in algorithms like the Rabin Karp pattern matching                     Comment      More infoAdvertise with us   Next Article     hashlib module in Python          A        akshisaxena        Follow             Improve       Article Tags :    DSA   Python   Python-DSA     Practice Tags :   python       Similar Reads   MD5 hash in Python                       Cryptographic hashes are used in day-day life like in digital signatures, message authentication codes, manipulation detection, fingerprints, checksums (message integrity check), hash tables, password storage and much more. They are also used in sending messages over network for security or storing    5 min read   hashlib module in Python                       A Cryptographic hash function is a function that takes in input data and produces a statistically unique output, which is unique to that particular set of data. The hash is a fixed-length byte stream used to ensure the integrity of the data. In this article, you will learn to use the hashlib module    5 min read   Python hash() method                       Python hash() function is a built-in function and returns the hash value of an object if it has one. The hash value is an integer that is used to quickly compare dictionary keys while looking at a dictionary. Python hash() function SyntaxSyntax : hash(obj) Parameters : obj : The object which we need    6 min read   Double Hashing in Python                       Double hashing is a collision resolution technique used in hash tables. It works by using two hash functions to compute two different hash values for a given key. The first hash function is used to compute the initial hash value, and the second hash function is used to compute the step size for the    4 min read   Cuckoo Hashing in Python                       Cuckoo Hashing derived its name from the cuckoo bird, which lays its eggs in the nests of other birds, replacing their eggs with its own. Cuckoo Hashing works in a similar manner which involves moving the values to different location whenever there is a collision in the hash table. In this article,    5 min read   Dictionaries in Python                       A Python dictionary is a data structure that stores the value in key: value pairs. Values in a dictionary can be of any data type and can be duplicated, whereas keys can't be repeated and must be immutable. Example: Here, The data is stored in key:value pairs in dictionaries, which makes it easier t    5 min read   SHA in Python                       SHA, ( Secure Hash Algorithms ) are set of cryptographic hash functions defined by the language to be used for various applications such as password security etc. Some variants of it are supported by Python in the "hashlib" library. These can be found using "algorithms_guaranteed" function of hashli    3 min read   Linear Probing in Python                       Linear probing is a technique used in hash tables to handle collisions. When a collision occurs (i.e., when two keys hash to the same index), linear probing searches for the next available slot in the hash table by incrementing the index until an empty slot is found. What is Linear Probing?In linear    2 min read   Hashing Passwords in Python with BCrypt                       In this article, we will see how to hash passwords in Python with BCrypt. Storing passwords in plain text is a bad practice as it is vulnerable to various hacking attempts. That's why it is recommended to keep them in a hashed form. What is hashing? It's a process of converting one string to another    4 min read   SHA3 in Python                       A cryptographic hash function is an exceptional class of hash function that has certain properties that make it appropriate for use in cryptography. It is a numerical algorithm that maps information of self-assertive size to a piece line of a fixed size (a hash function) which is intended to likewis    6 min read         Like                                                                                                               Corporate & Communications Address:                         A-143, 7th Floor, Sovereign Corporate Tower, Sector- 136, Noida, Uttar Pradesh (201305)                          Registered Address:                          K 061, Tower K, Gulshan Vivante Apartment, Sector 137, Noida, Gautam Buddh Nagar, Uttar Pradesh, 201305                                                Advertise with us    CompanyAbout UsLegalPrivacy PolicyIn MediaContact UsAdvertise with usGFG Corporate SolutionPlacement Training ProgramLanguagesPythonJavaC++PHPGoLangSQLR LanguageAndroid TutorialTutorials ArchiveDSAData StructuresAlgorithmsDSA for BeginnersBasic DSA ProblemsDSA RoadmapTop 100 DSA Interview ProblemsDSA Roadmap by Sandeep JainAll Cheat SheetsData Science & MLData Science With PythonData Science For BeginnerMachine LearningML MathsData VisualisationPandasNumPyNLPDeep LearningWeb TechnologiesHTMLCSSJavaScriptTypeScriptReactJSNextJSBootstrapWeb DesignPython TutorialPython Programming ExamplesPython ProjectsPython TkinterPython Web ScrapingOpenCV TutorialPython Interview QuestionDjangoComputer ScienceOperating SystemsComputer NetworkDatabase Management SystemSoftware EngineeringDigital Logic DesignEngineering MathsSoftware DevelopmentSoftware TestingDevOpsGitLinuxAWSDockerKubernetesAzureGCPDevOps RoadmapSystem DesignHigh Level DesignLow Level DesignUML DiagramsInterview GuideDesign PatternsOOADSystem Design BootcampInterview QuestionsInteview PreparationCompetitive ProgrammingTop DS or Algo for CPCompany-Wise Recruitment ProcessCompany-Wise PreparationAptitude PreparationPuzzlesSchool SubjectsMathematicsPhysicsChemistryBiologySocial ScienceEnglish GrammarCommerceWorld GKGeeksforGeeks VideosDSAPythonJavaC++Web DevelopmentData ScienceCS Subjects        @GeeksforGeeks, Sanchhaya Education Private Limited, All rights reserved                    We use cookies to ensure you have the best browsing experience on our website. By using our site, you          acknowledge that you have read and understood our          Cookie Policy &          Privacy Policy            Got It !                     Improvement        Suggest changes      Suggest Changes Help us improve. Share your suggestions to enhance the article. Contribute your expertise and make a difference in the GeeksforGeeks portal.        Create Improvement Enhance the article with your expertise. Contribute to the GeeksforGeeks community and help create better learning resources for all.                Suggest Changes       min 4 words, max Words Limit:1000     Thank You! Your suggestions are valuable to us.                               What kind of Experience do you want to share?          Interview Experiences        Admission Experiences        Career Journeys        Work Experiences        Campus Experiences        Competitive Exam Experiences               